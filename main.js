!function(){"use strict";class e{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this._isLiked=e.isLiked,this._id=e._id,this._cardSelector=t,this._handleCardImageClick=s,this._handleDeleteCardClick=r,this._handleLikeClick=i}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{console.log("This",this),this._handleLikeClick(this._id,this)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteCardClick(this)})),this._cardImage.addEventListener("click",(()=>{this._handleCardImageClick({link:this._link,name:this._name})}))}_handleLikeIcon(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}setCardLike(e){this._isLiked=e,this._handleLikeIcon()}_handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._cardElement=this.getTemplate(),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._cardImage=this._cardElement.querySelector(".card__image"),this._deleteButton=this._cardElement.querySelector(".card__trash-button"),this._cardTitle=this._cardElement.querySelector(".card__title"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardTitle.textContent=this._name,this._handleLikeIcon(),this._setEventListeners(),this._cardElement}}var t=class{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formEl=t}_showInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formEl.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_toggleButtonState(e){this._hasInvalidInput(e)?this.disableSubmitButton():(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}disableSubmitButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_setEventListeners(){this._inputEls=[...this._formEl.querySelectorAll(this._inputSelector)],this._submitButton=this._formEl.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState(this._inputEls,this._submitButton)}))}))}enableValidation(){this._formEl.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.querySelector(".modal__close").addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal_opened"))&&this.close()}))}}class r extends s{constructor(e){let{popupSelector:t,handleFormSubmit:s}=e;super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=s,this._inputElements=this._popupElement.querySelectorAll(".modal__input"),this._submitButton=this._popupElement.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){const e={};return this._inputElements.forEach((t=>{e[t.name]=t.value})),e}setIsLoading(e){this._submitButton.textContent=e?"Saving...":this._submitButtonText}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._popupForm.reset()}))}close(){super.close()}}const i=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}addCard(e,t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse)}setUserInfo(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkResponse)}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"80eefb5d-3c72-4e96-aa37-56dafc99311a","Content-Type":"application/json"}}),n={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},o=document.querySelector(".profile__add-button"),a=document.querySelector("#profile-title-input"),l=document.querySelector("#profile-description-input"),c=document.querySelector("#profile-edit-modal"),d=document.querySelector("#add-card-modal"),h=document.querySelector("#profile-edit-button"),u=document.querySelector("#profile-image-button"),_=document.forms["edit-avatar-form"],p=document.querySelector(".profile__image"),m=new class extends s{constructor(e){let{popupSelector:t}=e;super({popupSelector:t}),this._popupSrc=this._popupElement.querySelector(".modal__preview-image"),this._popupCap=this._popupElement.querySelector(".modal__image-caption")}open(e){this._popupCap.textContent=e.name,this._popupSrc.src=e.link,this._popupSrc.alt=e.name,super.open()}}({popupSelector:"#preview-image-modal"});i.getUserInfo().then((e=>{E.setUserInfo({name:e.name,about:e.about,avatar:e.avatar})})).catch((e=>console.error("Error Fetching User Info",e)));const E=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,description:this._jobElement.textContent.trim(),avatar:this._avatarElement.src}}setUserInfo(e){this._nameElement.textContent=e.name,this._jobElement.textContent=e.about,this._avatarElement.src=e.avatar}}({nameSelector:"#profile-title",jobSelector:"#profile-description",avatarSelector:".profile__image"}),v=new r({popupSelector:"#profile-edit-modal",handleFormSubmit:e=>{v.setIsLoading(!0),i.setUserInfo(e.name,e.about).then((e=>{E.setUserInfo(e),v.close(),y.disableSubmitButton()})).catch((e=>console.error("Error updating user info",e))).finally((()=>{v.setIsLoading(!1)}))}}),S=new r({popupSelector:"#add-card-modal",handleFormSubmit:e=>{let{name:t,link:s}=e;S.setIsLoading(!0),i.addCard(t,s).then((e=>{const t=L(e);k.addItems(t),S.close(),I.disableSubmitButton()})).catch((e=>{console.error(e)})).finally((()=>{S.setIsLoading(!1)}))}}),b=new class extends s{constructor(e){let{popupSelector:t}=e;super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form")}setSubmitAction(e){this._handleConfirmDelete=e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleConfirmDelete(),this.close()}))}}({popupSelector:"#confirmation-modal"});b.setEventListeners();const k=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItems(e){this._container.prepend(e)}}({renderer:e=>{const t=L(e);k.addItems(t)}},".cards__list");function L(t){return new e(t,"#card-template",(e=>{m.open(e)}),C,f).getView()}function f(e,t){t._isLiked?i.removeLike(e).then((()=>{t.setCardLike(!1),console.log("like removed for card ID",e)})).catch((e=>console.error("error removing like:",e))):i.addLike(e).then((()=>{t.setCardLike(!0)})).catch((e=>console.error("Error adding like",e)))}function C(e){b.open(),b.setSubmitAction((()=>{i.deleteCard(e._id).then((()=>{e._handleDeleteCard(),b.close()})).catch((e=>console.error("Error deleting cards:",e)))}))}u.addEventListener("click",(()=>{g.open()}));const g=new r({popupSelector:"#edit-avatar-modal",handleFormSubmit:e=>{g.setIsLoading(!0);const t=e.link;i.updateAvatar(t).then((e=>{p.src=e.avatar,g.close(),B.disableSubmitButton()})).catch((e=>console.error("Error updating avatar",e))).finally((()=>{g.setIsLoading(!1)}))}});g.setEventListeners(),o.addEventListener("click",(()=>S.open())),v.setEventListeners(),S.setEventListeners(),m.setEventListeners(),h.addEventListener("click",(()=>{const e=E.getUserInfo();a.value=e.name,l.value=e.description,v.open()}));const y=new t(n,c),I=new t(n,d),B=new t(n,_);y.enableValidation(),I.enableValidation(),B.enableValidation(),i.getInitialCards().then((e=>{k.renderItems(e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,